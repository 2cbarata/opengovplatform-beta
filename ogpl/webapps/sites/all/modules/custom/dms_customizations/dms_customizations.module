<?php 
/**
 * Implementation of hook_init().
 */
function dms_customizations_init() {
  drupal_add_js(drupal_get_path('module', 'dms_customizations') . '/js/tree.js');
  drupal_add_css(drupal_get_path('module', 'dms_customizations') . '/css/tree.css');
}

/**
 * Implementation of hook_perm().
 */

function dms_customizations_perm() {
  $perms = array('approve visualization');
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function dms_customizations_menu() {
  $items = array();

  $items['dms/subagency/populate/callback/ahah'] = array(
    'page callback' => 'dms_customizations_subagency_populate_callback_ahah',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['dms/subsector/populate/callback/ahah'] = array(
    'page callback' => 'dms_customizations_subsector_populate_callback_ahah',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  /*
   * By: India Team
   */
  $items['dms/accesspoint/detail'] = array(
    'page callback' => 'dms_customizations_accesspoint_detail_callback_ahah',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  
  $items['dms/accessurl/detail'] = array(
      'page callback' => 'dms_customizations_aaccessurl_detail_callback_ahah',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
  );
  
  $items['node/%node/approvevisualization'] = array(
      'title' => 'Approve Visualization',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('approve_visualization', 1),
      'access arguments' => array('approve visualization'),
      'file' => 'approvevisualization.pages.inc',
      'weight' => 1,
      'type' => MENU_CALLBACK
  );
  
  $items['node/%node/disapprovevisualization'] = array(
      'title' => 'Approve Visualization',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('disapprove_visualization', 1),
      'access arguments' => array('approve visualization'),
      'file' => 'approvevisualization.pages.inc',
      'weight' => 1,
      'type' => MENU_CALLBACK
  );
  
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function dms_customizations_menu_alter(&$items) {
  //This entry corrects an AHAH access callback bug in the contributed module flexifield_filefield.module.
  //The menu item 'flexifield-filefieldâ€¦' access callback 'filefield_edit_access' expects at least 2 parameters.
  //More information is found here; http://drupal.org/node/853742#comment-3210312.
  $items['flexifield-filefield/ahah/%/%/%/%']['access arguments'] = array(2, 3);
}

/**
 * Implementation of hook_views_api().
 */
function dms_customizations_views_api() {
  return array('api' => 2);
}

/**
* Custom ahah callback handler to populate dataset subsector field.
*/
function dms_customizations_subsector_populate_callback_ahah() {
  // Ensure we have a array of all integer elements.
  $catogery = $_POST['field_ds_sector']['nid']['nid'];
  if (is_array($catogery)) {
    foreach ($catogery as &$value) {
      $value = intval($value);
    }
  }
  else {
    $catogery = intval($catogery);
    $catogery = array($catogery);
  }

  // Turn it into a list of integers
  $catogery = implode(",", $catogery);

  // Manually add the None option if needed.
  // TODO: drupal_render the element instead of manually assembling the options.
  $cat_sub = '<option value="">- ' . t('None') . ' -</option>';

  $query = "SELECT n.title, c.nid FROM {content_type_sub_sector} c, {node} n WHERE n.nid = c.nid AND c.field_sector_nr_nid IN (%s)";
  $result = db_query($query, $catogery);
  $options = array('' => t('- None -'));

  while ($obj = db_fetch_object($result)) {
    $cat_sub .= "<option value={$obj->nid}>{$obj->title}</option>";
    $options[$obj->nid] = $obj->title;
  }

  // The form is generated in an include file which we need to include manually.
  include_once 'modules/node/node.pages.inc';
  // We're starting in step #3, preparing for #4.
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Step #4.
  $form = form_get_cache($form_build_id, $form_state);

  // Preparing for #5.
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // Step #5.
  drupal_process_form($form_id, $form, $form_state);
  // Step #6 and #7 and #8.
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);


  $form['group_ds_all_datasets']['field_ds_sub_sector_nr']['nid']['nid']['#options'] = $options;

  form_set_cache($form_build_id, $form, $form_state);

  //skip validation for ahah
  drupal_get_messages('error');
  form_set_error(null, '', TRUE);

  dms_customizations_json_output(array(
    'status'   => TRUE,
    'data'     => $cat_sub,
  ));
}

/**
* Custom ahah callback handler to populate profile subagency field.
*/
function dms_customizations_subagency_populate_callback_ahah() {

  // Ensure we have a array of all integer elements.
  $catogery = $_POST['field_prof_agency']['nid']['nid'];
  if (is_array($catogery)) {
    foreach ($catogery as &$value) {
      $value = intval($value);
    }
  }
  else {
    $catogery = intval($catogery);
    $catogery = array($catogery);
  }

  // Turn it into a list of integers
  $catogery = implode(",", $catogery);

  // Manually add the None option if needed.
  // TODO: drupal_render the element instead of manually assembling the options.
  $cat_sub = '<option value="">- ' . t('None') . ' -</option>';

  $query = "SELECT n.title, c.nid FROM {content_type_sub_agency} c, {node} n WHERE n.nid = c.nid AND c.field_sa_subagency_agency_nid IN (%s)";
  $result = db_query($query, $catogery);

  while ($obj = db_fetch_object($result)) {
    $cat_sub .= "<option value={$obj->nid}>{$obj->title}</option>";
  }

  dms_customizations_json_output(array(
    'status'   => TRUE,
    'data'     => $cat_sub,
  ));
}

/**
 * Implementation of hook_form_alter().
 */
function dms_customizations_form_alter(&$form, &$form_state, $form_id) {
  
  switch ($form_id) {
    case 'user_register':
      // Add a new hidden element to attach ahah.
      // Because of a bug in "jQuery Update" module as discussed here http://drupal.org/node/1051696
      // Potential patches here http://drupal.org/node/806500
      $form['ahah_trigger'] = array(
        '#type' => 'hidden',
      );

      break;
    case 'profile_node_form':

      // Add a new hidden element to attach ahah.
      // Because of a bug in "jQuery Update" module as discussed here http://drupal.org/node/1051696
      // Potential patches here http://drupal.org/node/806500
      $form['ahah_trigger'] = array(
        '#type' => 'hidden',
      );

      $ahah_binding = array(
        'url'   => url('dms/subagency/populate/callback/ahah'),
        'event' => 'change',
        'wrapper' => 'edit-field-prof-sub-agency-nid-nid',
        'selector' => '#edit-ahah-trigger',
        'effect'   => 'slide',
        'method'   => 'replace',
        'effect'   => 'none',
        'progress' => array('type' => 'none'),
      );

      // List of valid the options for 'sub_category_field' based on category selection.
      $valid_subs = dms_customizations_profile_populate_subagency($form['field_prof_agency']['#default_value']);

      drupal_add_js('misc/jquery.form.js');
      drupal_add_js('misc/ahah.js');
      drupal_add_js(array(
        'ahah' => array('edit-field-prof-sub-agency-nid-nid' => $ahah_binding),
        'valid_subs' => $valid_subs,
      ), 'setting');


      // Trigger ahah whenever 'category_filed' selection changed.
      // Remove the redudent <div> under <select> added by ahah.
      drupal_add_js('jQuery(document).ready(function () {
        $("#edit-field-prof-agency-nid-nid").change(function(){$("' . $ahah_binding['selector'] . '").triggerHandler("change");});
        $("#edit-field-prof-sub-agency-nid-nid").ajaxComplete(function(){
   $(this).html($(this).find("option").parent().html());
        });
        $("#edit-field-prof-sub-agency-nid-nid option").each(function() {
          if ($(this).val() && jQuery.inArray($(this).val(), Drupal.settings.valid_subs) == -1) {
            $(this).remove();
          }
        });
      });', 'inline');

      break;

    case 'dataset_node_form':
      $form['#cache'] = TRUE;

      if ($node = $form['#node']) {
        global $user;
        $roles = $user->roles;
        $author = user_load($node->uid);
        
        $form['workflow']['workflow_comment_list'] = array(
            '#value' => dms_customizations_workflow_history($node->nid),
        );
        // If the logged in user has the Agency POC role and the node was created by a data steward show the sendback option
        $role_check = ($user->uid == 1 || !isset($roles['4']) || (isset($roles['4']) && isset($author->roles['3'])));

        if (!$role_check) {
          unset($form['workflow']['Dataset Management System']['#options']['5']);
        }
      }

      $profile = content_profile_load('profile', $user->uid);
      $admin_user = ($user->uid == 1);

      if(isset($profile->field_prof_agency[0]['nid']) && !$admin_user) {
        $form['field_ds_agency_name']['#default_value'][0]['nid'] = $profile->field_prof_agency[0]['nid'];
      }

      if(isset($profile->field_prof_sub_agency[0]['nid']) && !$admin_user) {
        $form['field_ds_sub_agency']['#default_value'][0]['nid'] = $profile->field_prof_sub_agency[0]['nid'];
      }

      $form['#after_build'][] = 'dms_customizations_dataset_after_build';

      //Dataset sector field ahah alters

      // Add a new hidden element to attach ahah.
      // Because of a bug in "jQuery Update" module as discussed here http://drupal.org/node/1051696
      // Potential patches here http://drupal.org/node/806500
      $form['ahah_trigger'] = array(
        '#type' => 'hidden',
      );

      $ahah_binding = array(
        'url'   => url('dms/subsector/populate/callback/ahah'),
        'event' => 'change',
        'wrapper' => 'edit-field-ds-sub-sector-nr-nid-nid',
        'selector' => '#edit-ahah-trigger',
        'effect'   => 'slide',
        'method'   => 'replace',
        'effect'   => 'none',
        'progress' => array('type' => 'none'),
      );

      drupal_add_js('misc/jquery.form.js');
      drupal_add_js('misc/ahah.js');
      drupal_add_js(array('ahah' => array('edit-field-ds-sub-sector-nr-nid-nid' => $ahah_binding)), 'setting');
      /*
       * By: India Team
      */
      drupal_add_js(drupal_get_path('module', 'dms_customizations') . '/js/dms_customizations.js');
      drupal_add_css(drupal_get_path('module', 'dms_customizations') . '/css/dms_customizations.css');
      
      // Trigger ahah whenever 'category_filed' selection changed.
      // Remove the redudent <div> under <select> added by ahah.
      drupal_add_js('jQuery(document).ready(function () {
        $("#edit-field-ds-sector-nid-nid").change(function(){$("' . $ahah_binding['selector'] . '").triggerHandler("change");});
        $("#edit-field-ds-sub-sector-nr-nid-nid").ajaxComplete(function(){
   $(this).html($(this).find("option").parent().html());
        });
      });', 'inline');

      // Minimize the options for sub categories based on category selection.
      $form['#after_build'][] = 'dms_customizations_dataset_populate_subsector_after_build';
      /*
      echo "<pre>";
      print_r( $form['field_ds_contact_name']);
      print_r( $form['field_ds_ministry_department']);
      echo "</pre>";
      die();
      */
      if(!empty($form['field_ds_ministry_department']))
        $form['field_ds_ministry_department']['#required'] = TRUE;
      
      /*
      if(!empty($form[field_ds_contact_phone_number])) {
        foreach($form[field_ds_contact_phone_number] as $index => $phone){
          if(is_numeric($index)) {
            if($phone['#required'] == 1 )
              $form['field_ds_contact_phone_number'][$index]['#element_validate'][] = 'reuired';
          }
        }
      }
      */  
     
      break;

    case 'workflow_tab_form':
      $form['workflow']['workflow_comment']['#description'] = 'Enter any additional comments.';
      
      if (isset($_GET['workflow_state'])) {

        

        $node = $form['node']['#value'];
        $wid = workflow_get_workflow_for_type($node->type);
        $workflow_name = workflow_get_name($wid);
        $sid = (int)$_GET['workflow_state'];
        $form['workflow'][$workflow_name]['#default_value'] = $sid;

        if (isset($_REQUEST['destination'])) {
          $form['cancel'] = array('#type' => 'markup', '#value' => l(t('Cancel'), $_REQUEST['destination'], array('attributes' => array('class' => 'cancel-button'))));
        }

        global $user;
        $roles = $user->roles;
        $author = user_load($node->uid);

        // If the logged in user has the Agency POC role and the node was created by a data steward show the sendback option
        $role_check = ($user->uid == 1 || !isset($roles['4']) || (isset($roles['4']) && isset($author->roles['3'])));

        if (!$role_check) {
          unset($form['workflow']['Dataset Management System']['#options']['5']);
        }
        
        if (isset($roles['4'])) {
         if ($node->field_dms_poc_comp[0]['value'] != 1) {
           $form['workflow']['#prefix'] ="<br/><strong>This Dataset is incompliance with National Data Sharing and Accessibility Policy (NDSAP)</strong>";
         }
        }
      }
      break;

    case 'views_exposed_form':
      switch ($form['#id']) {
        case 'views-exposed-form-dataset-management-block-2':
          if (empty($_REQUEST['sid'])) { $form_state['input']['sid'] = array('5' => '5'); }
          break;

        case 'views-exposed-form-dataset-management-block-3':
          if (empty($_REQUEST['sid'])) { $form_state['input']['sid'] = array('6' => '6'); }
          break;

        case 'views-exposed-form-dataset-management-block-4':
          if (empty($_REQUEST['sid'])) { $form_state['input']['sid'] = array('7' => '7'); }
          break;

        default:
          break;
      }
      break;

    case 'views_bulk_operations_form__1':
      //Configure Views Bulk OPeration Settings
      if (isset($form['select']['operation']['#options'])) {
        global $user;
        $roles = $user->roles;

        if ($user->uid == 1) {
          //User 1 has access to all actions
        }
        else if (isset($roles['3'])) {
          //Select actions for 'Data Steward' role
          unset($form['select']['operation']['#options']['workflow_customizations_sendback_action']);
          if (isset($form['select']['operation']['#options']['workflow_customizations_approve_action'])) {
            $form['select']['operation']['#options']['workflow_customizations_approve_action'] = 'Submit';
          }
        }
        else if (isset($roles['9'])) { 
          //Select actions for 'Manager' role
          unset($form['select']['operation']['#options']['workflow_customizations_sendback_action']);
          unset($form['select']['operation']['#options']['workflow_customizations_approve_action']);
          unset($form['select']['operation']['#options']['views_bulk_operations_delete_node_action']);
        }        
      }

      $form['select']['#weight'] = '50';

      if (isset($form['actions']['cancel']['#value'])) {
        $form['actions']['cancel']['#value'] = str_replace('class="active">Cancel</a>', 'class="active cancel-button">Cancel</a>', $form['actions']['cancel']['#value']);
      }

      if (isset($form['cancel']['#value'])) {
        $form['cancel']['#value'] = str_replace('class="active">Cancel</a>', 'class="active cancel-button">Cancel</a>', $form['cancel']['#value']);
      }

      if ($form['target_sid']) {
        $states = workflow_customizations_non_system_workflow_states(); 
        foreach($form['target_sid']['#options'] as $wid => $value) {
          foreach($value as $sid => $name) {
            if (empty($states[$sid])) {
              unset($form['target_sid']['#options'][$wid][$sid]);
            }
          }
        }
      }
      break;

    case 'webform_client_form_101':
      $form['actions']['cancel'] = array('#type' => 'markup', '#value' => l(t('Cancel'), $_REQUEST['destination'], array('attributes' => array('class' => 'cancel-button'))), '#weight' => 50);
      break;

    case 'user_register':
       if ($form['account']) {
          $form['account']['mail']['#description'] = 'This will be used for login and email notifications.';
          $form['account']['notify']['#default_value'] = 1; // enable notification by default
          $form['account']['notify']['#disabled'] = 1; // forbid modifying this value
       } else {
          $form['mail']['#description'] = 'This will be used for login and email notifications.';
          $form['notify']['#default_value'] = 1; // enable notification by default
          $form['notify']['#disabled'] = 1; // forbid modifying this value
       }
       if ($form['password_policy'] && $form['password_policy']['force_password_change']) {
          $form['password_policy']['force_password_change']['#default_value'] = 1; // ensure value checked
          $form['password_policy']['force_password_change']['#disabled'] = 1; // forbid modifying this value
       }
       break;
    case 'system_site_information_settings':
      $form['proxy_setting'] = array(
          '#type' => 'fieldset',
          '#title' => t('Proxy Setting'),
          '#description' => t('You can set proxy setting.'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
      );
      
      $form['proxy_setting']['proxy_active'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Active Proxy'),
          '#default_value' => variable_get('proxy_active', ''),
          '#options' => array(
              'yes' => t('Yes'),
          ),
      );
      
      $form['proxy_setting']['proxy_username'] = array(
          '#type' => 'textfield',
          '#title' => t('Username'),
          '#default_value' => variable_get('proxy_username', ''),
          '#description' => t("Enter the username."),
      );
      
      $form['proxy_setting']['proxy_password'] = array(
          '#type' => 'password',
          '#title' => t('Password'),
          '#default_value' => variable_get('proxy_password', ''),
          '#description' => t("Enter the password."),
      );
      
      $form['proxy_setting']['proxy_url'] = array(
          '#type' => 'textfield',
          '#title' => t('Url'),
          '#default_value' => variable_get('proxy_url', ''),
          '#description' => t("Enter the url."),
      );
      break;
    default:
      break;
  }

  // Limit role filter for POC(4) and Data Steward(3) users
  if ($form_id == 'views_exposed_form' && isset($form['rid'])) {
     global $user;
     if (array_intersect(array(3,4), array_keys($user->roles))) {
        $form['rid']['#options'] = array(
           '4' => _role_approve_role_name_by_role_id(4),
           '3' => _role_approve_role_name_by_role_id(3),
        );
     }
  }

  // If form is editable we add a cancel button that redirects to $base_url.
  if (isset($form['buttons'])) {
     $base = $GLOBALS['base_url'];
     
     $form['buttons']['cancel'] = array(
        '#type' => 'button',
        '#value' => t('Cancel'),
        '#weight' => '15'
     );
     
  }
  
  
  if (isset($form['actions']['cancel'])) {
    $no = $form['actions']['cancel']['#value'];
    if (!is_null($no) && preg_match('/(<\/?)(\w+)([^>]*>)/e', $no)) {
      // Get the text to put on the cancel button
      $value = preg_replace('/(<\/?)(\w+)([^>]*>)/e', '', $no);
      //+ ADDED:
      eregi('m|href\s*=\s*\"([^\"]+)\"|ig', $no, $href);
      //+ get the value of the "href" from the cancel-link
      //-+ REPLACED:
      $form['actions']['cancel']['#value'] = '';
      //-+ Hide the old cancel link
      // Add our own button
      $form['actions']['docancel'] = array(
          '#type' => 'submit',
          '#button_type' => 'submit',
          '#name' => 'cancel',
          '#submit' => 'false',
          '#value' => $value,
          '#attributes' => array(
          //-+ REPLACED:
              'onclick' => '$(this).parents("form").attr("allowSubmission", "false");
                window.location = "'.$href[1].'";'),
                  //-+ just print the first result of the eregi-function
      //(as in the cancel-link there always be min. and max. 1 instance of ' href="" ')
      );
      // Prevent the form submission via our button
      $form['#attributes']['onsubmit'] =
      'if ($(this).attr("allowSubmission") == "false") return false;';
    }
  }
  
}

// implementation of hook_email_registration_name
function dms_customizations_email_registration_name($edit, $account) {
   // use email address as username
   return $edit['mail'];
}

/**
* Custom after_build callback handler.
*/
function dms_customizations_fetch_subagencies($agency) {
  $sql = 'select nid, field_sa_subagency_name_value from {content_type_sub_agency} where field_sa_subagency_agency_nid = %d';
  $options = array('' => '- None -');
  $result = db_query($sql, $agency);

  while ($row = db_fetch_object($result)) {
    $options[$row->nid] = $row->field_sa_subagency_name_value;
  }

  return $options;
}

/**
* Custom after_build callback handler.
*/
function dms_customizations_dataset_after_build($form, &$form_state) {
  global $user;
  $profile = content_profile_load('profile', $user->uid);
  $admin_user = ($user->uid == 1);

  $agency_otpions = $form['group_ds_all_datasets']['field_ds_agency_name']['nid']['nid']['#options'];
  $agency_value = $form['group_ds_all_datasets']['field_ds_agency_name']['nid']['nid']['#value'];

  //For new datasets use the user profile agency field
  if(!isset($form['#node']->nid) && isset($agency_value)) {
    $form['group_ds_all_datasets']['field_ds_agency_name']['nid']['nid']['#options'] = array($agency_value => $agency_otpions[$agency_value]);
    dms_customizations_dataset_fix_disabled($form['group_ds_all_datasets']['field_ds_agency_name']);

    $subagency_options = dms_customizations_fetch_subagencies($agency_value);
    $subagency_value = $profile->field_prof_sub_agency[0]['nid'];

    if(isset($subagency_value)) {
      $form['group_ds_all_datasets']['field_ds_sub_agency']['nid']['nid']['#options'] = array($subagency_value => $subagency_options[$subagency_value]);
      dms_customizations_dataset_fix_disabled($form['group_ds_all_datasets']['field_ds_sub_agency']);
    }
    else {
      $form['group_ds_all_datasets']['field_ds_sub_agency']['nid']['nid']['#options'] = $subagency_options;
    }
  }
  //For existing datasets disable the agency field
  else {
    dms_customizations_dataset_fix_disabled($form['group_ds_all_datasets']['field_ds_agency_name']);
    $agency_selected_value = $form['group_ds_all_datasets']['field_ds_agency_name']['nid']['nid']['#value'];
    $form['group_ds_all_datasets']['field_ds_agency_name']['nid']['nid']['#options'] = array($agency_selected_value  => $agency_otpions[$agency_selected_value]);

    $subagency_options = dms_customizations_fetch_subagencies($agency_selected_value);
    $form['group_ds_all_datasets']['field_ds_sub_agency']['nid']['nid']['#options'] = $subagency_options;
  }
  dms_customizations_dataset_fix_disabled($form['group_ds_contact_information']['field_ds_ministry_department']);
  $form['group_dsat_access_type']['field_ds_is_visual']['#prefix'] = '<div class="visualize-link"></div>';
  return $form;
}


function dms_customizations_profile_populate_subagency($agencys) {

  $subs = array();

  if (!$agencys || !$agencys[0]['nid']) {
    return $subs;
    }

  $ags = array();
  foreach ($agencys as $ag) {
    $ags[] = $ag['nid'];
  }
  $ags = implode(",", $ags);

  $query = "SELECT n.title, c.nid FROM {content_type_sub_agency} c, {node} n WHERE n.nid = c.nid AND c.field_sa_subagency_agency_nid IN (%s)";
  $result = db_query($query, $ags);

    while ($obj = db_fetch_object($result)) {
    $subs[] = $obj->nid;
  }

  return $subs;
}

/**
* Custom after_build callback handler.
*/
function dms_customizations_dataset_populate_subsector_after_build($form, &$form_state) {
  $form['group_ds_all_datasets']['field_ds_sub_sector_nr']['nid']['nid']['#options'] = array();

  // Find the default category, if any.
  $categorys = $form['group_ds_all_datasets']['field_ds_sector']['#default_value'];
  if ($categorys) {
    $cats = array();
    foreach ($categorys as $cat) {
      $cats[] = $cat['nid'];
    }

    $cats = implode(",", $cats);

    if($cats) {
    $query = "SELECT n.title, c.nid FROM {content_type_sub_sector} c, {node} n WHERE n.nid = c.nid AND c.field_sector_nr_nid IN (%s)";
    $result = db_query($query, $cats);

    $form['group_ds_all_datasets']['field_ds_sub_sector_nr']['nid']['nid']['#options'][''] = '- None -';

    while ($obj = db_fetch_object($result)) {
      $form['group_ds_all_datasets']['field_ds_sub_sector_nr']['nid']['nid']['#options'][$obj->nid] = $obj->title;
    }
  }
  }

  return $form;
}

/**
* Recursively set the disabled attribute of a CCK field
* and all its dependent FAPI elements.
*/
function dms_customizations_dataset_fix_disabled(&$elements) {
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {

      // Recurse through all children elements.
      dms_customizations_dataset_fix_disabled($elements[$key]);
    }
  }

  if (!isset($elements['#attributes'])) {
    $elements['#attributes'] = array();
  }
  $elements['#attributes']['disabled'] = 'disabled';
}


/**
 * Implementation of hook_file_download
 *
 */


function dms_customizations_file_download($filepath) {
  $filepath = file_create_path($filepath);
  $result = db_query("SELECT * FROM {files} WHERE filepath = '%s'", $filepath);

  // Ensure case-sensitivity of uploaded file names.
  while ($file = db_fetch_object($result)) {
    if (strcmp($file->filepath, $filepath) == 0) {
      break;
    }
  }

  // If the file is not found in the database, we're not responsible for it.
  if (empty($file)) {
    return;
  }

  // See if this is a file on a newly created node, on which the user who
  // uploaded it will immediately have access.
  $new_node_file = $file->status == 0 && isset($_SESSION['filefield_access']) && in_array($file->fid, $_SESSION['filefield_access']);
  if ($new_node_file) {
    $denied = FALSE;
  } else {
    //get parent node
    /*
    $result = db_query("select nid from content_type_dataset where field_ds_datafile_fid = '%s'", $file->fid);
    */
    
    $result = db_query("SELECT nid 
        FROM content_type_dataset ds 
        WHERE ds.field_dsat_downloadable_value LIKE '%\"fid\";s:_:\"%s\"%' ", $file->fid);
    
    $row = db_fetch_object($result);
    $nid = $row->nid;

    //Check if node is of type dataset
    if (($node = node_load($nid)) && $node->type == 'dataset') {
      if (node_access('view', $node)) {
        $denied = FALSE;
      } else {
        $denied = TRUE;
      }
    }
  }

  if ($denied) {
    return -1;
  } else {
    //access granted
    $name = mime_header_encode($file->filename);
    $type = mime_header_encode($file->filemime);
    return array(
      'Content-Type: ' . $type . '; name="' . $name . '"',
      'Content-Length: ' . $file->filesize,
      'Content-Disposition: attachment; filename="' . $name . '"',
      'Cache-Control: private',
    );
  }
}


/**
 * This function fixes Drupal JSON header issues that relate to IE9. More information is found here http://drupal.org/node/952220
 * Issue is fixed in the equivalent function for Drupal 7.  http://api.drupal.org/api/drupal/includes!common.inc/function/drupal_json_output/7
 */
function dms_customizations_json_output($var = NULL) {
  // We are returning JavaScript, so tell the browser.
  // drupal_set_header('Content-Type: text/javascript; charset=utf-8');

  // Changed to text/html from text/javascript to work in all browsers.
  drupal_set_header('Content-Type: text/html; charset=utf-8');

  if (isset($var)) {
    echo drupal_to_js($var);
  }
}

/*
function dms_customizations_extension_check($type, $mime_type = FALSE) {
  if (!empty($type)) {
    $vocab_object = dms_customizations_get_vocabulary_by_name('File Format');
    $extension = taxonomy_get_children($vocab_object->vid);
    if (!empty($extension)) {
      $type = explode(';', $mime_type);
      foreach ($extension as $ext => $value) {
        if ($value == $type[0]) {
          return $value;
        }
      }
    }
  }
  return FALSE;
}
*/

/**
* Custom after_build callback handler.
* By: India Team
*/
function dms_customizations_accesspoint_detail_callback_ahah($nid) {
  $url    = $_GET['url'];
  $output = NULL;
  $data   = NULL; 
  
  if (valid_url($url)) {
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1");
    
    if(variable_get('proxy_active', '') == 'yes'){
      $proxy_username = variable_get('proxy_username', '');
      $proxy_password = variable_get('proxy_password', '');
      $proxy_url = variable_get('proxy_url', '');
      
      $proxy = $proxy_url;
      $proxy = explode(':', $proxy);
      $loginpassw = $proxy_username . ':' . $proxy_password;
      
      curl_setopt($ch, CURLOPT_PROXY, $proxy[0]);
      curl_setopt($ch, CURLOPT_PROXYPORT, $proxy[1]);
      curl_setopt($ch, CURLOPT_PROXYAUTH, CURLAUTH_NTLM);
      curl_setopt($ch, CURLOPT_PROXYUSERPWD, $loginpassw);
    }
    
    curl_setopt($ch, CURLOPT_FAILONERROR, 1);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    $retValue = curl_exec($ch);
    $file_info = curl_getinfo($ch);
    curl_close($ch);
    
    $_file_type = explode(';', $file_info['content_type']);
    
    $file_type = $_file_type[0]; 
    $file_size = number_format($file_info['download_content_length']/(1024*1024), 2, '.', '');
    
     $zip_format = array('application/zip', 'application/x-gzip'); 
    
    if(in_array($file_type, $zip_format))
      $compressed = 'Yes';
    else
      $compressed = 'No';
    /*
    $term = taxonomy_get_term_by_name($file_type);
    
    if(!empty($term)){
      $file_type = $term[0]->tid;
    }
    */
    
    $data = array(
      'file_type' => $file_type,
      'size'      => $file_size,
      'compressed'=> $compressed,
      'file_info' => $file_info
    );
    
    $output = array(
      'status'  => TRUE,
      'data'    => $data
    );
  } 
  else {
    $output = array(
      'status'  => FALSE,
      'data'    => $data,
      'message' => 'Invalid Url'
    );
  }
  
  drupal_json($output);
}

/**
 * This function will return a vocabulary object which matches the
 * Vocabulary Name
 
function dms_customizations_get_vocabulary_by_name($vocabulary_name) {
  $vocabs = taxonomy_get_vocabularies(NULL);
  foreach ($vocabs as $vocab_object) {
    if ($vocab_object->name == $vocabulary_name) {
      return $vocab_object;
    }
  }
  return NULL;
}
*/
  
function dms_customizations_get_file_icon($tid, $taxnomy_chk = true) {
  if($taxnomy_chk){
    $term = taxonomy_get_term($tid);
  } else {
    $term = $tid;
  }
  if ($term) {
    if($taxnomy_chk){
      $format = $term->name;
    } else {
      $format = $term;
    }
    switch ($format) {
      case 'text/plain':
      case 'text/txt':
        return 'text.png';
        break;  
      case 'text/html':
        return 'html.png';
        break;
      case 'text/csv':
      case 'application/csv':
        return 'csv.png';
        break;
      case 'text/xml':
      case 'application/xml':
        return 'xml.png';
        break;
      case 'application/msword':
      case 'application/vnd.msword':
      case 'application/vnd.ms-word':
        return 'doc.png';
        break;
      case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
        return 'docx.png';
        break;
      case 'application/vnd.ms-excel':
      case 'application/msexcel':
      case 'application/vnd.ms-office':
        return 'xls.png';
        break;
      case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
        return 'xlsx.png';
        break;
      
      case 'application/pdf':
        return 'pdf.png';
        break;
      case 'application/java-archive':
        return 'jar.gif';
        break;
    }
  }
  return false;
}

function dms_customizations_aaccessurl_detail_callback_ahah($nid) {
  $url  = $_GET['url'];
  $op = $_GET['op'];
  $id = $_GET['id'];
  $output = array();
  
  if (valid_url($url)) {
    switch($op) {
      case 'addhttp':
      
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_URL, $url);
      /*
      curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.1) Gecko/20061204 Firefox/2.0.0.1");
      */
      if (variable_get('proxy_active', '') == 'yes') {
        $proxy_username = variable_get('proxy_username', '');
        $proxy_password = variable_get('proxy_password', '');
        $proxy_url = variable_get('proxy_url', '');
        
        $proxy = $proxy_url;
        $proxy = explode(':', $proxy);
        $loginpassw = $proxy_username . ':' . $proxy_password;
        
        curl_setopt($ch, CURLOPT_PROXY, $proxy[0]);
        curl_setopt($ch, CURLOPT_PROXYPORT, $proxy[1]);
        curl_setopt($ch, CURLOPT_PROXYAUTH, CURLAUTH_NTLM);
        curl_setopt($ch, CURLOPT_PROXYUSERPWD, $loginpassw);
      }
      
      curl_setopt($ch, CURLOPT_FAILONERROR, 1);
      curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_TIMEOUT, 60);
      
      $retValue = curl_exec($ch);
      $file_info = curl_getinfo($ch);
      
      $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
      
      $status = curl_getinfo($ch, CURLINFO_HTTP_CODE) == 404;
      
      curl_close($ch);
      
      if (!$status && $http_code != 0) {
        $output[status] = TRUE;
        $output[url] = $url;
        $output[message] = 'Valid Url.';
        $output[id] = $id;
        $output[http_code] = $http_code;
      } 
      else {
        $output[status] = FALSE;
        $output[id] = $id;
        $output[message] = 'InValid Url.';
        $output[http_code] = $http_code;
        $output[returnval] = $retValue;
      }
      break;
    }
  } 
  else {
    $output[status] = FALSE;
    $output[id] = $id;
    $output[message] = 'InValid Url.';
  }

  drupal_json($output);
}
/**
 * Implementation of hook_views_pre_render().
 */
function dms_customizations_views_pre_render(&$view) {
  if ($view->name == 'agency_wise_report_1') {
    $row                  = new stdClass();
    $row->term_data_name  = 'Total';
    $view->result[]       = $row;
  }
}

function dms_customizations_get_ministry_department($nid, $level = null) {
  $delta_sql = "SELECT MAX(delta) delta FROM `content_field_ds_ministry_department` 
  WHERE nid = $nid";
  
  $delta_max = db_result(db_query($delta_sql));
  
  switch($level) {
    case 'ministry':    
      $_level = $delta_max;
      break;
    case 'department':
      $_level = ($delta_max-1 < 0? 0 : $delta_max-1);
      break;
    case 'oragnization':
      $_level = ($delta_max-2 < 0? 0 : $delta_max-2);
      break;
    default:
      $_level = 0;
  }
  
  $sql = "SELECT name 
  FROM `content_field_ds_ministry_department` MD
  LEFT JOIN term_data TD on TD.tid = MD.field_ds_ministry_department_value
  WHERE MD.nid = $nid AND delta = $_level ";
    
  $name=db_result(db_query($sql));
  
  if($name){
    return $name;
  }
  
  return FALSE;
}

function dms_customizations_get_delta($tid, $nid){
  $delta_sql = "SELECT delta delta FROM `content_field_ds_ministry_department`
  WHERE nid = $nid AND field_ds_ministry_department_value = $tid";
  
  $delta = db_result(db_query($delta_sql));
  
  if($delta){
    return $delta;
  }
  
  return FALSE;
}

function dms_customizations_get_max_delta($nid){
  $delta_sql = "SELECT MAX(delta) delta FROM `content_field_ds_ministry_department` 
  WHERE nid = $nid";

  $delta = db_result(db_query($delta_sql));

  if($delta){
    return $delta;
  }

  return FALSE;
}


function dms_customizations_get_dataset_validator_details($nid) {
  $old_sid = 6; //VALIDATOR
  $sid = 7; //PENDING WITH PMU
  
  /* Get all Validator Approve State */
  if($validator_approve_states = dms_customizations_get_workflow_histoty($nid, 7, 6)) {
    /* Take the latest */
    $validator_approve_state = $validator_approve_states[0];
    return $validator_approve_state;
  }
  
  return false;
}

function dms_customizations_get_workflow_histoty($nid, $sid = null , $old_sid = null) {
  $workflow_sql = 'SELECT ' ;
  $workflow_sql .= 'WH.nid,  WH.uid, WS_NEW.state new_state, WS_OLD.state old_state '; 
  $workflow_sql .= 'FROM {workflow_node_history} WH ';
  $workflow_sql .= 'INNER JOIN {workflow_states} WS_NEW ON WS_NEW.sid = WH.sid ';
  $workflow_sql .= 'INNER JOIN {workflow_states} WS_OLD ON WS_OLD.sid = WH.old_sid ';
  
  $workflow_sql .= 'WHERE WH.nid = '.$nid.' ';
  
  if($sid) {
    $workflow_sql .= ' AND WH.sid = '.$sid.' ';
  }
  
  if($old_sid) {
    $workflow_sql .= ' AND WH.old_sid = '.$old_sid.' ';
  }
  
  $workflow_sql .= 'ORDER BY  WH.stamp DESC';
  
  
  $result = db_query($workflow_sql);
  
  $data = array();
  
  while($row = db_fetch_object($result) ){
    $data[] = $row;
  }
  
  if(count($data))
    return $data;
  
  return false;
}

function dms_customization_profile_values($uid) {
  $profile_sql = 'SELECT (SELECT title FROM {profile_fields} PF WHERE PF.fid = PV.fid) field, PV.value 
      FROM {profile_values} PV 
      WHERE PV.uid = '.$uid.' ';
  
  if($_GET['debug']) {
    echo '<pre>' . $profile_sql . '</pre>';
  }
  
  $result = db_query($profile_sql);
  
  $data = array();
  
  while($row = db_fetch_object($result) ){
    $data[] = $row;
  }
  
  if(count($data))
    return $data;
  
  return false;
}

function dms_customization_dataconversion_url($url, $format){
  $datatool_url = variable_get('webservice_datatool', 'http://data.gov.in/datatool/');
  return $datatool_url . "?url=" . $url . "&format=$format";
}
function dms_customization_dataconversion($url, $exclude_format=array(), $theme = 'ogpl_css2') {
   $output = '<ul>';
   $allowed_format = array('xml','csv','json','jsonp','xlsx','xls');
   $get_format = array_diff($allowed_format, $exclude_format);
   foreach ($get_format as $format) {
     $href = dms_customization_dataconversion_url($url, $format);
     $output .= "<li><a href='$href' target='_blank' title='$format'><img  src='$base_url/" . drupal_get_path('theme', $theme) . "/images/iconset/" . $format . ".gif'/></a></li>";
   }
  $output .= '</ul>';
   return $output;
}
function dms_customizations_workflow($op, $old_state, $new_state, $node) {
  switch ($op) {
    case 'transition post':
      if($nid)$node = node_load(array("nid" => $nid));
      if($node->type=='dataset'){
        // set accept NDSAP Policy if Data Controller moves the dataset to next step.
        if($old_state==6 && $new_state==7){
          $node->field_dms_poc_comp[0]['value'] = 1;
          node_save($node);
        }
      }
      break;
  }
}


// Remove space with _ with file name
function dms_customizations_file_insert($file) {
  if ($file->source == 'group_dsat_access_type_field_dsat_downloadable_0_value_field_dam_datafile_0') {
    // change filename replace spaces with '_'
    $new_filename = str_replace(' ', '_', $file->filename);
    $new_filepath = dirname($file->destination) . '/' . $new_filename;
    // $file is passed by reference
    if (file_move($file, $new_filepath)) {
      // update files table with new file information
      drupal_write_record('files', $file, 'fid');
    }
  }    
}

function dms_customizations_workflow_history($nid) {
  $output = '';
  if(module_exists('workflow')) {
    $sql = "SELECT FROM_UNIXTIME(h.stamp) date, h.old_sid old_state, h.sid new_state, u.name , h.comment
    FROM {workflow_node_history} h 
    LEFT JOIN {users} u ON h.uid = u.uid 
    WHERE h.nid = $nid 
    ORDER BY date DESC";
    
    $result = db_query($sql);
      $data = array();
    
    while($row = db_fetch_array($result) ){
      if($row['old_state']) {
        $row['old_state'] = workflow_get_state_name($row['old_state']);
      }
      if($row['new_state']) {
        $row['new_state'] = workflow_get_state_name($row['new_state']);
      }
      if($row['date']) {
        $row['date'] = date('d-m-Y h:i:s', strtotime($row['date']));
      }
      $data[] = $row;
    }
    $header = array('Date', 'Old State', 'New State', 'By', 'Comment');
    $output .= theme_table($header, $data, NULL, 'Workflow History');
  }
  return $output;
}
